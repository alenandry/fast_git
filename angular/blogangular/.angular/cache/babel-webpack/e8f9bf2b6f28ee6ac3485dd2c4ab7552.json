{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor() {}\n\n    get_data() {\n      let data = [{\n        num: '60',\n        date: '2022-01-04',\n        title: ' 将 Keras 模型导入 TensorFlow.js ',\n        content: ' Keras 模型（通常通过 Python API 创建）可能保存成多种格式之一。“完整模型”格式可以转换成 TensorFlow.js Layers 格式，这种格式可以直接加载到 TensorFlow.js 中进行推断或进一步训练。',\n        category: 'Ml'\n      }, {\n        num: '59',\n        date: '2022-01-03',\n        title: 'Use Css Media',\n        content: 'Use Css Media 媒体查询的响应式设计',\n        category: 'Javascript'\n      }, {\n        num: '58',\n        date: '2022-01-03',\n        title: 'Js implment music player',\n        content: 'Js implment music player with js && css',\n        category: 'Javascript'\n      }, {\n        num: '57',\n        date: '2022-01-03',\n        title: 'Rust implment matrix',\n        content: 'Rust implment matrix operation methods',\n        category: 'Rust'\n      }, {\n        num: '56',\n        date: '2022-01-02',\n        title: 'Rust Grammar Summary',\n        content: 'Rust Grammar Summary &&  learn notebook',\n        category: 'Rust'\n      }, {\n        num: '55',\n        date: '2021-10-27',\n        title: 'Java Solution for CodeWar Kata ',\n        content: 'Java Solution for CodeWar Kata && Java Grammar',\n        category: 'Java'\n      }, {\n        num: '54',\n        date: '2021-10-24',\n        title: 'Default Bash profile ',\n        content: 'Default Bash profile && Explain profile',\n        category: 'Bash'\n      }, {\n        num: '53',\n        date: '2021-10-19',\n        title: 'Use Rust implement codewar Kata solutions',\n        content: `Use Rust implement codewar Kata solutions`,\n        category: 'DataStructure&&Rust'\n      }, {\n        num: '52',\n        date: '2021-10-09',\n        title: 'Javascript 面试 this 指向',\n        content: 'Javascript 面试 this 指向（面试必考）',\n        category: 'Javascript'\n      }, {\n        num: '51',\n        date: '2021-10-08',\n        title: 'precompile js 面试 （预编译）',\n        content: '经典js面试题（预编译）主要是测试前端开发者对作用域的理解',\n        category: 'Javascript'\n      }, {\n        num: '50',\n        date: '2021-09-30',\n        title: '图解 Rust 所有权与生命周期',\n        content: '所有权与生命周期是  Rust  语言非常核心的内容。其实不仅仅是 Rust 有这两个概念，在C/C++ 中也一样是存在的。而几乎所有的内存安全问题也源于对所有权和生命周期的错误使用。只要是不采用垃圾回收来管理内存的程序语言，都会有这个问题。',\n        category: 'Rust',\n        diractory: ['1.引言', '2.所有权与生命周期期望解决的问题', '3.变量绑定与所有权的赋予 ', '4.所有权的转移']\n      }, {\n        num: '49',\n        date: '2021-09-29',\n        title: 'Generate .jar in java && run',\n        content: 'JAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。',\n        category: 'Java'\n      }, {\n        num: '48',\n        date: '2021-09-28',\n        title: 'Ajax 原理（发送 Ajax 请求的五个步骤)',\n        content: ' 我们在访问一个普通的网站时，当浏览器加载完`HTML、CSS、JS`以后，网站的内容就固定了。如果想让网站内容发生更改，就必须刷新页面才能够看到更新的内容。可如果用到异步更新，情况就大为改观了。比如，我们在访问新浪微博时，看到一大半了，点击底部的加载更多，会自动帮我们加载更多的微博，同时页面并不会整体刷新。试想一下，如果没有 Ajax，就没有互联网的今天。 ',\n        category: 'Javascript'\n      }, {\n        num: '47',\n        date: '2021-09-27',\n        title: 'Angular-组件传值',\n        content: ' 一. 基本概念. 输出属性 @Output 装饰器：这个属性总是返回 EventEmitter 。. 当它通过事件绑定的形式被绑定时，值会“流出”这个属性。. 输入 属性 @Input 通常接收数据值。. 输出 属性 @Output 暴露事件生产者，如 EventEmitter 对象。',\n        category: 'Angular'\n      }, {\n        num: '46',\n        date: '2021-09-20',\n        title: 'How To Read Local JSON Files In Angular',\n        content: 'We can import or read local JSON files in Angular,several different ways depending upon the Angular version we are using.In this post I am listing out different methods with examples on how to read JSON files in Angular.',\n        category: 'Angular'\n      }, {\n        num: '45',\n        date: '2021-09-18',\n        title: 'How to reload/refresh the data when navigate to same route in Angular 9',\n        content: '  When I am on /setting/services and hits the /setting route the SettingViewComponent code doesn’t get initiate again.I have a redirection logic in SettingViewComponent which needs to be re-initiate.You can use the Router and override the shouldReuseRoute from the routeReuseStrategy method which returns false statement.',\n        category: 'Angular'\n      }, {\n        num: '44',\n        date: '2021-09-15',\n        title: 'Rust 常用类型转换',\n        content: '  可以看到i32, u32, f64 到String类型是同一个函数，这样的话，如何来确定要转换至的具体类型？就是类型推导！当然，如果rust无法通过上下文推导出类型，就需要给出提示，例如x.parse::().unwrap()。但是通常情况下，都不需要提示即可自动推导出类型',\n        category: 'Rust'\n      }, {\n        num: '43',\n        date: '2021-09-12',\n        title: 'Creating the Perfect Commit in Git',\n        content: ' A commit in Git can be one of two things:- It can be a jumbled assortment of changes from all sorts of topics: some lines of code for a bugfix, a stab at rewriting an old module, and a couple of new files for a brand new feature.- Or, with a little bit of care, it can be something that helps us stay on top of things. It can be a container for related changes that belong to one and only one topic, and thereby make it easier for us to understand what happened.',\n        category: 'Git'\n      }, {\n        num: '42',\n        date: '2021-09-10',\n        title: '单线程,同步任务和异步任务',\n        content: '  JavaScript 语言和执行环境是单线程。即同一时间，只能处理一个任务。具体来说，所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个。所有的任务都需要排队。',\n        category: 'Javascript'\n      }, {\n        num: '41',\n        date: '2021-08-29',\n        title: '零值比较--BOOL，int，float，指针变量与零值比较的if语句',\n        content: '  这是程序员面试的一道常见题，也是个C++基础问题。若只在大学里看过几本基础的编程入门书，看见这道题可能会觉得奇怪，不就是和0比较吗，直接拿出来比就是了，其实非也。下文引自google搜索结果，出处不详，高手可以无视，菜菜留下，记得做好笔记。首先给个提示：题目中要求的是零值比较，而非与0进行比较，在C++里“零值”的范围可就大了，可以是0， 0.0 ， FALSE或者“空指针。',\n        category: 'Java'\n      }, {\n        num: '40',\n        date: '2021-08-25',\n        title: 'Git Guide',\n        content: 'Git 简单使用说明',\n        category: 'Git'\n      }, {\n        num: '39',\n        date: '2021-08-20',\n        title: 'Google zx',\n        content: '  Bash is great, but when it comes to writing scripts,people usually choose a more convenient programming language.JavaScript is a perfect choice, but standard Node.js library requires additional hassle before using. The `zx` package provides useful wrappers around `child_process`, escapes arguments and gives sensible defaults.',\n        category: 'Javascript'\n      }, {\n        num: '38',\n        date: '2021-08-19',\n        title: 'Implement Algorithm With JavaScript or Java',\n        content: '  用Javascript,Java实现常用的算法',\n        category: 'DataStructure&&Java&&Javascript'\n      }, {\n        num: '37',\n        date: '2021-08-15',\n        title: 'Vue Animations',\n        content: '动画的作用：提高用户的体验，帮助用户更好的理解页面中的功能。',\n        category: 'Vue'\n      }, {\n        num: '36',\n        date: '2021-08-15',\n        title: 'Vue Post Props',\n        content: ' 子组件不能直接使用父组件中的数据。父组件可以通过props属性向子组件传值。',\n        category: 'Vue'\n      }, {\n        num: '35',\n        date: '2021-08-15',\n        title: 'Vue Ajax',\n        content: '  vue-resource 发送Ajax请求常见的数据请求类型包括：get、post、jsonp。',\n        category: 'Vue'\n      }, {\n        num: '34',\n        date: '2021-08-10',\n        title: 'React life cycle',\n        content: ' 组件的生命周期在组件创建、到加载到页面上运行、以及组件被销毁的过程中，总是伴随着各种各样的事件，这些在组件特定时期，触发的事件统称为组件的生命周期。',\n        category: 'React'\n      }, {\n        num: '33',\n        date: '2021-08-10',\n        title: 'React Router',\n        content: ' 使用React路由之前，我们需要先安装 react-router-dom这个包',\n        category: 'React'\n      }, {\n        num: '32',\n        date: '2021-08-10',\n        title: 'React This',\n        content: '通过 bind() 绑定this，并给函数传参',\n        category: 'React'\n      }, {\n        num: '31',\n        date: '2021-08-08',\n        title: 'Node MySql ',\n        content: ' 用 Node.js 管理 MySql 数据库',\n        category: 'Backend'\n      }, {\n        num: '30',\n        date: '2021-08-07',\n        title: 'CSS Note',\n        content: '  CSS Note',\n        category: 'Javascript'\n      }, {\n        num: '29',\n        date: '2021-08-02',\n        title: 'Angular $parse/$eval和$observe/$watch如何区分',\n        content: ' 大家在看angular的时候，有时候偶尔会看到$parse,$eval和$observe,$watch这两对语法，随着深入使用angular，就不可避免使用到它。 文章从内部运行机制跟实际需求的角度来解释这两对语法的区别。',\n        category: 'Angular'\n      }, {\n        num: '28',\n        date: '2021-08-02',\n        title: 'Angular 创建自定义指令',\n        content: '  这是一篇译文，来自angular开发者说明的指令。主要面向已经熟悉angular开发基础的开发者。这篇文档解释了什么情况下需要创建自己的指令，和如何去创建指令。',\n        category: 'Angular'\n      }, {\n        num: '27',\n        date: '2021-08-01',\n        title: 'Angular 自定义指令Note',\n        content: '指令能够能够把外部定义的内容传回指令模板内部(通过在内部标签使用ng-transclude)。这个外部指定的内容是根据外部的作用域控制的，跟指令的作用域无关。这个跟指令的模版解析是不一样的，指令模板解析的思路是模板-指令定义作用域名-外部作用域或者模板-指令定义作用域名-元素属性-外部作用域。当想要把任意内容引入到指令中时就需要开启这个功能。',\n        category: 'Angular'\n      }, {\n        num: '26',\n        date: '2021-08-01',\n        title: '控制器之间的通信',\n        content: '由于作用域的继承是基于js的原型继承方式，所以这里分为两种情况，当作用域上面的值为基本类型的时候，修改父作用域上面的值会 影响到子作用域，反之，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值；如果需要父作用域与子作用域共享一个值 的话，就需要用到后面一种，即作用域上的值为对象，任何一方的修改都能影响另一方，这是因为在js中对象都是引用类型。',\n        category: 'Angular'\n      }, {\n        num: '25',\n        date: '2021-08-01',\n        title: 'angular中的transclude',\n        content: 'Transclude - 在Angular的指令中，大家会看到有一个这样的一个配置属性，这个单词在英文字典里面也查询不到真实的意思，所以就用英文来标示它吧。如果你深入的使用angular的话，你就花很大一部分时间来创建自定义指令，那么就不可避免的要深入理解transclude。简单的讲，transclude主要完成以下工作，取出自定义指令中的内容(就是写在指令里面的子元素)，以正确的作用域解析它,然后再放回指令模板中标记的位置(通常是ng-transclude标记的地方)，虽然使用内建的ngTransclude对于基本的transclude操作已经足够简单',\n        category: 'Angular'\n      }, {\n        num: '24',\n        date: '2021-08-01',\n        title: '指令通信',\n        content: '通过收集整理，总结出了以下三种指令与控制器的通信方式：共享对象，服务，事件；每种方法都有自己的优缺点跟使用范围，大家可以斟酌使用',\n        category: 'Angular'\n      }, {\n        num: '23',\n        date: '2021-07-18',\n        title: 'JS Tutorial Array',\n        content: 'JS Tutorial, introduce Comment Method for Array',\n        category: 'Javascript'\n      }, {\n        num: '22',\n        date: '2021-07-18',\n        title: 'JS Tutorial Object',\n        content: 'JS Tutorial, introduce Comment Method for Object',\n        category: 'Javascript'\n      }, {\n        num: '21',\n        date: '2021-07-18',\n        title: 'JS Tutorial Math',\n        content: 'JS Tutorial, introduce Comment Method for Math',\n        category: 'Javascript'\n      }, {\n        num: '20',\n        date: '2021-07-17',\n        title: 'JS Tutorial Set',\n        content: 'JS Tutorial, introduce Comment Method for Set',\n        category: 'Javascript'\n      }, {\n        num: '19',\n        date: '2021-07-17',\n        title: 'JS Tutorial Map',\n        content: 'JS Tutorial, introduce Comment Method for Map',\n        category: 'Javascript'\n      }, {\n        num: '18',\n        date: '2021-07-16',\n        title: 'Python Solutions for MEID convert to pESN ',\n        content: 'MEID convert to pESN,Use python hashlib tool',\n        category: 'Python'\n      }, {\n        num: '17',\n        date: '2021-07-15',\n        title: 'Python Solutions for Find some dir or file list and romove ',\n        content: 'Find some dir or file list and romove,Use python os library',\n        category: 'Python'\n      }, {\n        num: '16',\n        date: '2021-07-10',\n        title: 'Python Solutions for Wechat send Messages regularly',\n        content: ' Wechat send Messages regularly,Use python wxpy,asyncio library',\n        category: 'Python'\n      }, {\n        num: '15',\n        date: '2021-07-20',\n        title: 'Solutions for Code War Problems',\n        content: ' Use Javascript or Rust to Solve Code War Problems',\n        category: 'DataStructure'\n      }, {\n        num: '14',\n        date: '2021-07-06',\n        title: 'Data Structure: LinkedList',\n        content: 'Implementing LinkedList',\n        category: 'DataStructure'\n      }, {\n        num: '13',\n        date: '2021-07-06',\n        title: 'Data Structure:BinarySearchTree ',\n        content: 'Implementing BinarySearchTree',\n        category: 'DataStructure'\n      }];\n      let sorted_by_date_data_new_last = data.sort((a, b) => {\n        var dateA = new Date(a.date).getTime();\n        var dateB = new Date(b.date).getTime();\n        return dateA - dateB;\n      });\n      let add_num_data = sorted_by_date_data_new_last.map((a, i) => {\n        return {\n          num: i.toString(),\n          date: a.date,\n          title: a.title,\n          content: a.content,\n          category: a.category\n        };\n      }); // console.log(add_num_data);\n\n      let sorted_by_date_data_new_frist = data.sort((a, b) => {\n        var dateA = new Date(a.date).getTime();\n        var dateB = new Date(b.date).getTime();\n        return dateB - dateA;\n      });\n      return sorted_by_date_data_new_frist;\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)();\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}