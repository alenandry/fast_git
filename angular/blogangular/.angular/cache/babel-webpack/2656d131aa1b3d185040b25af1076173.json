{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-markdown\";\nimport * as i2 from \"@angular/common/http\";\nexport let MarkdownComponent = /*#__PURE__*/(() => {\n  class MarkdownComponent {\n    constructor(mdService, http) {\n      this.mdService = mdService;\n      this.http = http;\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const markdownRaw = yield this.http.get(this.md_file, {\n          responseType: 'text'\n        }).toPromise(); // console.log(markdownRaw);\n\n        this.markdown = this.mdService.compile(markdownRaw);\n      });\n    }\n\n  }\n\n  MarkdownComponent.ɵfac = function MarkdownComponent_Factory(t) {\n    return new (t || MarkdownComponent)(i0.ɵɵdirectiveInject(i1.MarkdownService), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n\n  MarkdownComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MarkdownComponent,\n    selectors: [[\"app-markdown-preview\"]],\n    inputs: {\n      md_file: \"md_file\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"commandLine\", \"\", \"katex\", \"\", 1, \"markdown-body\", 3, \"data\"]],\n    template: function MarkdownComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"markdown\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"data\", ctx.markdown);\n      }\n    },\n    directives: [i1.MarkdownComponent],\n    styles: [\"\"]\n  });\n  return MarkdownComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}